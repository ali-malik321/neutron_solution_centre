{"ast":null,"code":"import { GET_POSTS, GET_THREE_POSTS, GET_TWO_POSTS, GET_POST, POST_ERROR, UPDATE_LIKES, DELETE_POST, ADD_POST, ADD_COMMENT, REMOVE_COMMENT } from \"../actions/types\";\nconst initialState = {\n  posts: [],\n  post: null,\n  twoPosts: [],\n  threePosts: [],\n  category: [],\n  loading: true,\n  error: {}\n};\nexport default function (state = initialState, action) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case GET_POSTS:\n      return { ...state,\n        posts: payload,\n        loading: false\n      };\n\n    case GET_POST:\n      return { ...state,\n        post: payload,\n        loading: false\n      };\n\n    case GET_TWO_POSTS:\n      return { ...state,\n        twoPosts: payload,\n        loading: false\n      };\n\n    case GET_THREE_POSTS:\n      return { ...state,\n        threePosts: payload,\n        loading: false\n      };\n\n    case ADD_POST:\n      return { ...state,\n        posts: [payload, ...state.posts],\n        loading: false\n      };\n\n    case DELETE_POST:\n      return { ...state,\n        posts: state.posts.filter(post => post._id !== payload),\n        loading: false\n      };\n\n    case POST_ERROR:\n      return { ...state,\n        error: payload,\n        loading: false\n      };\n\n    case UPDATE_LIKES:\n      return { ...state,\n        posts: state.posts.map(post => post._id === payload.id ? { ...post,\n          likes: payload.likes\n        } : post),\n        loading: false\n      };\n\n    case ADD_COMMENT:\n      return { ...state,\n        post: { ...state.post,\n          comments: payload\n        },\n        loading: false\n      };\n\n    case REMOVE_COMMENT:\n      return { ...state,\n        post: { ...state.post,\n          comments: state.post.comments.filter(comment => comment._id !== payload)\n        },\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/ali/neutron_solution_centre/src/reducers/post.js"],"names":["GET_POSTS","GET_THREE_POSTS","GET_TWO_POSTS","GET_POST","POST_ERROR","UPDATE_LIKES","DELETE_POST","ADD_POST","ADD_COMMENT","REMOVE_COMMENT","initialState","posts","post","twoPosts","threePosts","category","loading","error","state","action","type","payload","filter","_id","map","id","likes","comments","comment"],"mappings":"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","sourcesContent":["import {\n  GET_POSTS,\n  GET_THREE_POSTS,\n  GET_TWO_POSTS,\n  GET_POST,\n  POST_ERROR,\n  UPDATE_LIKES,\n  DELETE_POST,\n  ADD_POST,\n  ADD_COMMENT,\n  REMOVE_COMMENT\n} from \"../actions/types\";\n\nconst initialState = {\n  posts: [],\n  post: null,\n  twoPosts: [],\n  threePosts: [],\n  category: [],\n  loading: true,\n  error: {}\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case GET_POSTS:\n      return {\n        ...state,\n        posts: payload,\n        loading: false\n      };\n    case GET_POST:\n      return {\n        ...state,\n        post: payload,\n        loading: false\n      };\n    case GET_TWO_POSTS:\n      return {\n        ...state,\n        twoPosts: payload,\n        loading: false\n      };\n    case GET_THREE_POSTS:\n      return {\n        ...state,\n        threePosts: payload,\n        loading: false\n      };\n\n    case ADD_POST:\n      return {\n        ...state,\n        posts: [payload, ...state.posts],\n        loading: false\n      };\n    case DELETE_POST:\n      return {\n        ...state,\n        posts: state.posts.filter(post => post._id !== payload),\n        loading: false\n      };\n    case POST_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loading: false\n      };\n    case UPDATE_LIKES:\n      return {\n        ...state,\n        posts: state.posts.map(post =>\n          post._id === payload.id ? { ...post, likes: payload.likes } : post\n        ),\n        loading: false\n      };\n    case ADD_COMMENT:\n      return {\n        ...state,\n        post: { ...state.post, comments: payload },\n        loading: false\n      };\n    case REMOVE_COMMENT:\n      return {\n        ...state,\n        post: {\n          ...state.post,\n          comments: state.post.comments.filter(\n            comment => comment._id !== payload\n          )\n        },\n        loading: false\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}